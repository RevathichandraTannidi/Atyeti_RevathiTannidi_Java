1. Nested Method Variable Shadowing
Problem Statement:
Write a Java program where a local variable in an inner method shadows a variable
 in an outer method. Demonstrate how the inner method's variable takes precedence
 over the outer method's variable within its scope.

Objective:
Understand variable shadowing and scope resolution in nested methods.


2. Static vs Instance Variable Behavior
Problem Statement:
Create a Java class with both static and instance variables. Implement methods
that modify these variables and observe how changes to static variables affect
all instances, while changes to instance variables affect only the specific instance.

Objective:
Explore the differences between static and instance variables in terms of
memory allocation and scope.

3. Final Variables in Loops
Problem Statement:
Write a Java program that uses a final variable within a loop. Attempt to modify
 this variable inside the loop and observe the compilation error. Then, refactor the
 code to use a final variable in a lambda expression or anonymous class within the loop.

Objective:
Understand the immutability of final variables and their behavior in different contexts.

4. Variable Scope in Exception Handling
Problem Statement:
Develop a Java program that demonstrates the scope of variables declared inside try,
 catch, and finally blocks. Show how variables declared in these blocks are accessible
  or inaccessible outside their respective blocks.

Objective:
Learn about variable accessibility and scope within exception handling constructs.

5. Anonymous Inner Classes and Variable Access
Problem Statement:
Implement a Java program that uses an anonymous inner class to access variables from
the enclosing class. Demonstrate how final or effectively final variables can be
 accessed within the anonymous class, and what happens if you try to modify them.

Objective:
Understand the rules governing variable access and modification in anonymous inner classes.